// horoscopoHandler.js
import axios from 'axios';

// Mapa de signos em portugu√™s para ingl√™s
const signosMap = {
    'aries': 'aries',
    '√°ries': 'aries',
    'touro': 'taurus',
    'g√™meos': 'gemini',
    'gemeos': 'gemini',
    'cancer': 'cancer',
    'c√¢ncer': 'cancer',
    'le√£o': 'leo',
    'leao': 'leo',
    'virgem': 'virgo',
    'libra': 'libra',
    'escorpi√£o': 'scorpio',
    'escorpiao': 'scorpio',
    'sagit√°rio': 'sagittarius',
    'sagitario': 'sagittarius',
    'capric√≥rnio': 'capricorn',
    'capricornio': 'capricorn',
    'aqu√°rio': 'aquarius',
    'aquario': 'aquarius',
    'peixes': 'pisces'
};

// Emojis para cada signo
const signosEmoji = {
    'aries': '‚ôà',
    'taurus': '‚ôâ',
    'gemini': '‚ôä',
    'cancer': '‚ôã',
    'leo': '‚ôå',
    'virgo': '‚ôç',
    'libra': '‚ôé',
    'scorpio': '‚ôè',
    'sagittarius': '‚ôê',
    'capricorn': '‚ôë',
    'aquarius': '‚ôí',
    'pisces': '‚ôì'
};

// Tradu√ß√µes manuais dos campos
const traducoes = {
    mood: {
        'Happy': 'Feliz',
        'Sad': 'Triste',
        'Energetic': 'Energ√©tico',
        'Calm': 'Calmo',
        'Excited': 'Animado',
        'Relaxed': 'Relaxado',
        'Anxious': 'Ansioso',
        'Peaceful': 'Pac√≠fico',
        'Optimistic': 'Otimista',
        'Thoughtful': 'Pensativo'
    },
    color: {
        'Red': 'Vermelho',
        'Blue': 'Azul',
        'Green': 'Verde',
        'Yellow': 'Amarelo',
        'Orange': 'Laranja',
        'Purple': 'Roxo',
        'Pink': 'Rosa',
        'White': 'Branco',
        'Black': 'Preto',
        'Gold': 'Dourado',
        'Silver': 'Prateado',
        'Brown': 'Marrom'
    }
};

// Fun√ß√£o CORRIGIDA para obter data no Brasil com ajuste de per√≠odo
function getDataBrasil(periodo = 'hoje') {
    const agora = new Date();
    const brasilia = new Date(agora.toLocaleString('en-US', { timeZone: 'America/Sao_Paulo' }));
    
    // Ajusta a data conforme o per√≠odo solicitado
    if (periodo === 'amanh√£' || periodo === 'amanha' || periodo === 'tomorrow') {
        brasilia.setDate(brasilia.getDate() + 1);
    } else if (periodo === 'ontem' || periodo === 'yesterday') {
        brasilia.setDate(brasilia.getDate() - 1);
    }
    
    return brasilia.toLocaleDateString('pt-BR', { 
        day: '2-digit', 
        month: '2-digit', 
        year: 'numeric' 
    });
}

// Fun√ß√£o para traduzir texto usando API gratuita MyMemory
async function traduzirTexto(texto) {
    try {
        const url = `https://api.mymemory.translated.net/get?q=${encodeURIComponent(texto)}&langpair=en|pt-br`;
        const response = await axios.get(url, { timeout: 5000 });
        
        if (response.data && response.data.responseData && response.data.responseData.translatedText) {
            return response.data.responseData.translatedText;
        }
        return texto;
    } catch (error) {
        console.log('Erro na tradu√ß√£o:', error.message);
        return texto;
    }
}

// Fun√ß√£o melhorada: busca na API em portugu√™s do Brasil
async function buscarHoroscopoPortugues(signo, periodo) {
    try {
        const signosMapPtBr = {
            '√°ries': 'aries',
            'aries': 'aries',
            'touro': 'touro',
            'g√™meos': 'gemeos',
            'gemeos': 'gemeos',
            'c√¢ncer': 'cancer',
            'cancer': 'cancer',
            'le√£o': 'leao',
            'leao': 'leao',
            'virgem': 'virgem',
            'libra': 'libra',
            'escorpi√£o': 'escorpiao',
            'escorpiao': 'escorpiao',
            'sagit√°rio': 'sagitario',
            'sagitario': 'sagitario',
            'capric√≥rnio': 'capricornio',
            'capricornio': 'capricornio',
            'aqu√°rio': 'aquario',
            'aquario': 'aquario',
            'peixes': 'peixes'
        };

        const signoPtBr = signosMapPtBr[signo.toLowerCase()];
        
        // Tenta API brasileira primeiro
        const url = `https://api.js.langapi.workers.dev/horoscopo/${signoPtBr}`;
        const response = await axios.get(url, { timeout: 8000 });
        
        if (response.data && response.data.previsao) {
            const emoji = signosEmoji[signosMap[signo.toLowerCase()]];
            const dataBrasil = getDataBrasil(periodo);
            
            return {
                sucesso: true,
                mensagem: `${emoji} *HOR√ìSCOPO - ${signo.toUpperCase()}* ${emoji}\n\n` +
                    `üìÖ *Data:* ${dataBrasil}\n\n` +
                    `üîÆ *Previs√£o:*\n${response.data.previsao}\n\n` +
                    `_¬© Damas da Night_`
            };
        }
    } catch (error) {
        console.log('API brasileira falhou:', error.message);
    }
    return null;
}

// Fun√ß√£o principal para buscar hor√≥scopo
export async function buscarHoroscopo(signo, periodo = 'today') {
    try {
        const signoNormalizado = signo.toLowerCase().trim();
        const signoIngles = signosMap[signoNormalizado];
        
        if (!signoIngles) {
            return {
                sucesso: false,
                mensagem: '‚ùå *Signo inv√°lido!*\n\nSignos dispon√≠veis:\n' +
                    '‚ôà √Åries\n‚ôâ Touro\n‚ôä G√™meos\n‚ôã C√¢ncer\n' +
                    '‚ôå Le√£o\n‚ôç Virgem\n‚ôé Libra\n‚ôè Escorpi√£o\n' +
                    '‚ôê Sagit√°rio\n‚ôë Capric√≥rnio\n‚ôí Aqu√°rio\n‚ôì Peixes'
            };
        }

        // Tenta buscar em portugu√™s primeiro
        if (periodo === 'hoje' || periodo === 'today') {
            const resultadoPt = await buscarHoroscopoPortugues(signoNormalizado, periodo);
            if (resultadoPt) return resultadoPt;
        }

        // Se n√£o encontrar, tenta API em ingl√™s (Vercel)
        try {
            const periodoMap = {
                'hoje': 'TODAY',
                'today': 'TODAY',
                'amanha': 'TOMORROW',
                'amanh√£': 'TOMORROW',
                'tomorrow': 'TOMORROW',
                'ontem': 'YESTERDAY',
                'yesterday': 'YESTERDAY'
            };

            const day = periodoMap[periodo.toLowerCase()] || 'TODAY';
            const url = `https://horoscope-app-api.vercel.app/api/v1/get-horoscope/daily?sign=${signoIngles}&day=${day}`;
            
            const response = await axios.get(url, { timeout: 10000 });
            
            if (response.data && response.data.data) {
                const emoji = signosEmoji[signoIngles];
                const data = response.data.data;
                
                // Traduz a previs√£o para portugu√™s
                const previsaoTraduzida = await traduzirTexto(data.horoscope_data);
                const dataBrasil = getDataBrasil(periodo);
                
                return {
                    sucesso: true,
                    mensagem: `${emoji} *HOR√ìSCOPO - ${signo.toUpperCase()}* ${emoji}\n\n` +
                        `üìÖ *Data:* ${dataBrasil}\n\n` +
                        `üîÆ *Previs√£o:*\n${previsaoTraduzida}\n\n` +
                        `_¬© Damas da Night_`
                };
            }
        } catch (erro1) {
            console.log('API Vercel falhou, tentando Aztro...');
        }

        // Tenta API Aztro como √∫ltima op√ß√£o
        const response = await axios.post(
            `https://aztro.sameerkumar.website/?sign=${signoIngles}&day=${periodo}`,
            {},
            { timeout: 10000 }
        );
        
        if (response.data) {
            const emoji = signosEmoji[signoIngles];
            const data = response.data;
            
            // Traduz TODOS os textos para portugu√™s
            const descricaoTraduzida = await traduzirTexto(data.description);
            const compatibilidadeTraduzida = data.compatibility ? await traduzirTexto(data.compatibility) : null;
            const humorTraduzido = data.mood ? (traducoes.mood[data.mood] || await traduzirTexto(data.mood)) : null;
            const corTraduzida = data.color ? (traducoes.color[data.color] || await traduzirTexto(data.color)) : null;
            const dataBrasil = getDataBrasil(periodo);
            
            let mensagem = `${emoji} *HOR√ìSCOPO - ${signo.toUpperCase()}* ${emoji}\n\n` +
                `üìÖ *Data:* ${dataBrasil}\n\n` +
                `üîÆ *Previs√£o:*\n${descricaoTraduzida}\n\n`;
            
            if (compatibilidadeTraduzida) {
                mensagem += `üíï *Compatibilidade:* ${compatibilidadeTraduzida}\n`;
            }
            if (humorTraduzido) {
                mensagem += `üòä *Humor:* ${humorTraduzido}\n`;
            }
            if (corTraduzida) {
                mensagem += `üé® *Cor da sorte:* ${corTraduzida}\n`;
            }
            if (data.lucky_number) {
                mensagem += `üçÄ *N√∫mero da sorte:* ${data.lucky_number}\n`;
            }
            if (data.lucky_time) {
                mensagem += `‚è∞ *Hor√°rio de sorte:* ${data.lucky_time}\n`;
            }
            
            mensagem += `\n_¬© Damas da Night_`;
            
            return {
                sucesso: true,
                mensagem: mensagem
            };
        }

    } catch (error) {
        console.error('Erro ao buscar hor√≥scopo:', error.message);
        return {
            sucesso: false,
            mensagem: '‚ùå *Erro ao buscar hor√≥scopo*\n\nTente novamente em alguns instantes.'
        };
    }
}

// Handler para processar mensagens do WhatsApp
export async function handleHoroscopoCommand(sock, message, args) {
    const chatId = message.key.remoteJid;
    const senderId = message.key.participant || message.key.remoteJid;
    
    // Verifica se o usu√°rio forneceu o signo
    if (args.length === 0) {
        await sock.sendMessage(chatId, {
            text: `@${senderId.split('@')[0]}\n\n` +
                'üîÆ *Como usar o comando de hor√≥scopo:*\n\n' +
                'üìù *Formato:* #horoscopo [signo] [per√≠odo]\n\n' +
                'üìå *Exemplos:*\n' +
                '‚Ä¢ #horoscopo le√£o\n' +
                '‚Ä¢ #horoscopo √°ries hoje\n' +
                '‚Ä¢ #horoscopo peixes amanh√£\n\n' +
                '‚ôà‚ôâ‚ôä‚ôã‚ôå‚ôç‚ôé‚ôè‚ôê‚ôë‚ôí‚ôì',
            mentions: [senderId],
            contextInfo: {
                stanzaId: message.key.id,
                participant: message.key.participant || message.key.remoteJid,
                quotedMessage: message.message
            }
        });
        return;
    }

    // Envia mensagem de carregamento COM REPLY
    await sock.sendMessage(chatId, {
        text: `@${senderId.split('@')[0]}\n\n` +
              'üîÆ *Consultando os astros...*\n‚è≥ Aguarde um momento...',
        mentions: [senderId],
        contextInfo: {
            stanzaId: message.key.id,
            participant: message.key.participant || message.key.remoteJid,
            quotedMessage: message.message
        }
    });

    const signo = args[0];
    const periodo = args[1] || 'hoje';
    
    const resultado = await buscarHoroscopo(signo, periodo);
    
    // Envia o resultado COM REPLY e men√ß√£o
    await sock.sendMessage(chatId, {
        text: `@${senderId.split('@')[0]}\n\n${resultado.mensagem}`,
        mentions: [senderId],
        contextInfo: {
            stanzaId: message.key.id,
            participant: message.key.participant || message.key.remoteJid,
            quotedMessage: message.message
        }
    });
}

// Fun√ß√£o auxiliar para listar todos os signos
export function listarSignos() {
    return 'üîÆ *SIGNOS DO ZOD√çACO* üîÆ\n\n' +
        '‚ôà *√Åries* (21/03 - 19/04)\n' +
        '‚ôâ *Touro* (20/04 - 20/05)\n' +
        '‚ôä *G√™meos* (21/05 - 20/06)\n' +
        '‚ôã *C√¢ncer* (21/06 - 22/07)\n' +
        '‚ôå *Le√£o* (23/07 - 22/08)\n' +
        '‚ôç *Virgem* (23/08 - 22/09)\n' +
        '‚ôé *Libra* (23/09 - 22/10)\n' +
        '‚ôè *Escorpi√£o* (23/10 - 21/11)\n' +
        '‚ôê *Sagit√°rio* (22/11 - 21/12)\n' +
        '‚ôë *Capric√≥rnio* (22/12 - 19/01)\n' +
        '‚ôí *Aqu√°rio* (20/01 - 18/02)\n' +
        '‚ôì *Peixes* (19/02 - 20/03)\n\n' +
        'üí¨ *Use:* #horoscopo [signo]';
}

export { signosMap };